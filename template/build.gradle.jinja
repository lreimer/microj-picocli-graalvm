plugins {
    id 'java'
    id 'application'
}

repositories {
    jcenter()
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    implementation 'info.picocli:picocli:4.6.1'
    implementation 'info.picocli:picocli-jansi-graalvm:1.2.0'

    annotationProcessor 'info.picocli:picocli-codegen:4.6.1'

    runtimeOnly 'info.picocli:picocli-codegen:4.6.1'
    runtimeOnly 'info.picocli:picocli-shell-jline3:4.6.1'
}

// Define the main class for the application
mainClassName = 'dev.ops.tools.Picocli'

task copyRuntimeLibs(type: Copy) {
    into "$buildDir/libs"
    from sourceSets.main.runtimeClasspath
    include "*.jar"
}

assemble.finalizedBy copyRuntimeLibs

String getClasspath() {
    'libs/' + file("$buildDir/libs").list()?.join(':libs/')
}

task graalNativeImage(description: 'Generate native image with GraalVM', dependsOn: 'build', type: Exec) {
    workingDir "$buildDir"
    commandLine = [
            'native-image',
            '-cp', getClasspath(),
            '-H:+ReportUnsupportedElementsAtRuntime',
            '-H:+ReportExceptionStackTraces',
            '-H:+AddAllCharsets',
            '--initialize-at-run-time=org.fusesource.jansi.WindowsAnsiOutputStream',
            '--no-server',
            '--enable-http',
            '--enable-https',
            'dev.ops.tools.Picocli',
            '{{ name }}'
    ]
}